#define N 300
#define M 7
int  n; //save the node number
char *arr[N]; //save the code of each node number
int fa[N][M]; //save the multiplying father of each node
int dep[N]; //the depth of each node
int head[N];
int nx[N];
int to[N]; //this tree array is used to save the GO plot
int tot; //save the edge index
int in[N]; //entering degree of each node

int main(int argc,char *argv[])
{
    initialize all the variables
        
    for every two lines in file
        do
        code <- first line
        code has been saved in arr[x]?v=x:v=n,save arr[n]
        for each code in second line
            do
        	code has been saved in arr[x]?u=x:u=n,save arr[n]
            to[tot]=v;
            nx[tot]=head[u];
            head[u]=tot++;  ////save the plot using chain forward star
            in[v]++;
    		done
        done

    if(dep[u]<=d){
        dep[u]=d;
        for(int i=head[u];i;i=nx[i]){
            int v=to[i];
            dfs(v,d+1);  //DFS，make sure all node is the deepest if it has multiple father
        }
    }    
    
   for(i=head[u];i;i=nx[i]){
            int v=to[i];
            if(dep[u]>=dep[fa[v][0]])fa[v][0]=u;
            father0(v);
        } //set the deepest father as its ultimate father

    DFS again
        do
        fa[u][i]=fa[fa[u][i-1]][i-1];
    	done
            
    u=argv[1]
    v=argv[2]
            
    if(dep[u]<dep[v])swap(u,v) //make sure u is the deeper node
    int d=dep[u]-dep[v];
    for(i=0;(1<<i)<=d;i++){//（1<<i）<=d make sure u don't jump over v
        if((1<<i)&d){   //（1<<i）&d find the suitable span to jump
            u=fa[u][i];
        }
    }
    if(u==v)LCA=u,return;//if u==v, LCA finded
    for(i=M-1;i>=0;i--){
        if(fa[v][i]!=fa[u][i]){
            u=fa[u][i];
            v=fa[v][i];
        }
    }
    LCA=fa[u][0],return
}
